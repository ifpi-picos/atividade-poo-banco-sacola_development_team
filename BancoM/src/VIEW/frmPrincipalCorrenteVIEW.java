package VIEW;

import DAO.ContaDAO;
import Entidades.ContaCorrente;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;


public class frmPrincipalCorrenteVIEW extends JDialog {
    ContaDAO contaDAO = new ContaDAO();
    private JPanel painelPrincipal;
    private JButton BtnSacar;
    private JButton btnDepositar;
    private JButton btnTransferir;
    private JButton MOSTRARDADOSDACONTAButton;
    private JButton btnEncerrar;
    private JLabel txtNomeUsuario;
    private JLabel txtSaldo;
    private JButton atualizarButton;
    private JButton btnSairConta;

    public frmPrincipalCorrenteVIEW(JFrame parent) {
        super(parent);
        setContentPane(painelPrincipal);
        setMinimumSize(new Dimension(360, 474));
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setModal(true);
        setLocationRelativeTo(parent);


        dispose();
        txtNomeUsuario.setText(frmLoginVIEW.usuario);
        txtSaldo.setText(String.valueOf(contaDAO.puxarSaldoConta(frmLoginVIEW.numConta)));
        BtnSacar.addActionListener(e -> sacar());
        btnDepositar.addActionListener(e -> depositar());
        btnTransferir.addActionListener(e -> transferir());
        MOSTRARDADOSDACONTAButton.addActionListener(e -> mostrarDados());
        btnEncerrar.addActionListener(e -> dispose());
        atualizarButton.addActionListener(e -> txtSaldo.setText(String.valueOf(contaDAO.puxarSaldoConta(frmLoginVIEW.numConta))));
        btnSairConta.addActionListener(e -> {
            dispose();
            frmLoginVIEW login = new frmLoginVIEW(null);
            login.setVisible(true);
        });
    }

    private void mostrarDados() {
        ContaDAO contaDAO = new ContaDAO();
        contaDAO.exibirInformacoesDaConta(frmLoginVIEW.numConta);
        txtSaldo.setText(String.valueOf(contaDAO.puxarSaldoConta(frmLoginVIEW.numConta)));
    }

    private void transferir() {
        if (contaDAO.getContadorTransferencia() > 2) {
            JOptionPane.showMessageDialog(null,
                    "Você atingiu o limite de 2 transferências por dia! A partir desse momento, " +
                            "será cobrado uma taxa de 3% por transferência.");
            int opcao = JOptionPane.showConfirmDialog(null, "Deseja continuar?");
            switch (opcao) {
                case 0 -> {
                    double valorTransferencia = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor da transferência: "));
                    int numeroConta = Integer.parseInt(JOptionPane.showInputDialog("Digite o número da conta: "));
                    ContaCorrente contaCorrente = new ContaCorrente();
                    contaCorrente.transferir(valorTransferencia, numeroConta, frmLoginVIEW.numConta);
                }
                case 1 ->
                        JOptionPane.showMessageDialog(null, "Volte amanhã para realizar mais transferências sem taxas!");
                case 2 -> JOptionPane.showMessageDialog(null, "Operação cancelada!");
            }
        } else {
            double valorTransferencia = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor da transferência: "));
            int numeroConta = Integer.parseInt(JOptionPane.showInputDialog("Digite o número da conta: "));
            ContaCorrente contaCorrente = new ContaCorrente();
            contaCorrente.transferir(valorTransferencia, numeroConta, frmLoginVIEW.numConta);
        }
        txtSaldo.setText(String.valueOf(contaDAO.puxarSaldoConta(frmLoginVIEW.numConta)));
    }

    private void depositar() {
        double valorDeposito = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor do depósito: "));
        ContaCorrente contaCorrente = new ContaCorrente();
        contaCorrente.depositar(valorDeposito, frmLoginVIEW.numConta);
        txtSaldo.setText(String.valueOf(contaDAO.puxarSaldoConta(frmLoginVIEW.numConta)));
    }

    private void sacar() {
        double valorSaque = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor do saque: "));
        ContaCorrente contaCorrente = new ContaCorrente();
        contaCorrente.sacar(valorSaque, frmLoginVIEW.numConta);
        txtSaldo.setText(String.valueOf(contaDAO.puxarSaldoConta(frmLoginVIEW.numConta)));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        painelPrincipal = new JPanel();
        painelPrincipal.setLayout(new GridLayoutManager(12, 4, new Insets(10, 10, 10, 10), -1, -1));
        BtnSacar = new JButton();
        Font BtnSacarFont = this.$$$getFont$$$("Unispace", Font.BOLD, 16, BtnSacar.getFont());
        if (BtnSacarFont != null) BtnSacar.setFont(BtnSacarFont);
        BtnSacar.setText("SACAR");
        painelPrincipal.add(BtnSacar, new GridConstraints(4, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnDepositar = new JButton();
        Font btnDepositarFont = this.$$$getFont$$$("Unispace", Font.BOLD, 16, btnDepositar.getFont());
        if (btnDepositarFont != null) btnDepositar.setFont(btnDepositarFont);
        btnDepositar.setText("DEPOSITAR");
        painelPrincipal.add(btnDepositar, new GridConstraints(6, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnTransferir = new JButton();
        Font btnTransferirFont = this.$$$getFont$$$("Unispace", Font.BOLD, 16, btnTransferir.getFont());
        if (btnTransferirFont != null) btnTransferir.setFont(btnTransferirFont);
        btnTransferir.setText("TRANSFERIR");
        painelPrincipal.add(btnTransferir, new GridConstraints(8, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        painelPrincipal.add(spacer1, new GridConstraints(5, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(10, 10), null, 0, false));
        final Spacer spacer2 = new Spacer();
        painelPrincipal.add(spacer2, new GridConstraints(7, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(10, 10), null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Unispace", Font.BOLD, 18, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Bem vindo (a)");
        painelPrincipal.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MOSTRARDADOSDACONTAButton = new JButton();
        Font MOSTRARDADOSDACONTAButtonFont = this.$$$getFont$$$("Unispace", Font.BOLD, 16, MOSTRARDADOSDACONTAButton.getFont());
        if (MOSTRARDADOSDACONTAButtonFont != null) MOSTRARDADOSDACONTAButton.setFont(MOSTRARDADOSDACONTAButtonFont);
        MOSTRARDADOSDACONTAButton.setText("MOSTRAR DADOS DA CONTA");
        painelPrincipal.add(MOSTRARDADOSDACONTAButton, new GridConstraints(2, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        painelPrincipal.add(spacer3, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(10, 10), null, 0, false));
        btnEncerrar = new JButton();
        Font btnEncerrarFont = this.$$$getFont$$$("Unispace", Font.BOLD, 16, btnEncerrar.getFont());
        if (btnEncerrarFont != null) btnEncerrar.setFont(btnEncerrarFont);
        btnEncerrar.setText("SAIR DO APLICATIVO");
        painelPrincipal.add(btnEncerrar, new GridConstraints(11, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        painelPrincipal.add(spacer4, new GridConstraints(9, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(10, 10), null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("Unispace", Font.BOLD, 18, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Saldo: R$");
        painelPrincipal.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtSaldo = new JLabel();
        Font txtSaldoFont = this.$$$getFont$$$("Unispace", Font.BOLD, 18, txtSaldo.getFont());
        if (txtSaldoFont != null) txtSaldo.setFont(txtSaldoFont);
        txtSaldo.setText("0000");
        painelPrincipal.add(txtSaldo, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        atualizarButton = new JButton();
        Font atualizarButtonFont = this.$$$getFont$$$("Unispace", Font.PLAIN, 12, atualizarButton.getFont());
        if (atualizarButtonFont != null) atualizarButton.setFont(atualizarButtonFont);
        atualizarButton.setText("Atualizar");
        painelPrincipal.add(atualizarButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 20), new Dimension(100, 30), 0, false));
        txtNomeUsuario = new JLabel();
        Font txtNomeUsuarioFont = this.$$$getFont$$$("Unispace", Font.BOLD, 18, txtNomeUsuario.getFont());
        if (txtNomeUsuarioFont != null) txtNomeUsuario.setFont(txtNomeUsuarioFont);
        txtNomeUsuario.setText("NomeUsuario");
        painelPrincipal.add(txtNomeUsuario, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, 10), null, 0, false));
        btnSairConta = new JButton();
        Font btnSairContaFont = this.$$$getFont$$$("Unispace", Font.BOLD, 16, btnSairConta.getFont());
        if (btnSairContaFont != null) btnSairConta.setFont(btnSairContaFont);
        btnSairConta.setText("SAIR DA CONTA");
        painelPrincipal.add(btnSairConta, new GridConstraints(10, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return painelPrincipal;
    }

}


